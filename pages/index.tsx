import React, { useEffect, useState } from "react";
import Head from "next/head";
import Link from "next/link";
import sha1 from "sha1";

import { Inter } from "@next/font/google";

import data from "../datas/links.json";

import { RxMagnifyingGlass as SearchIcon } from "react-icons/rx";
import { HiArrowRight as ArrowRight } from "react-icons/hi";

import styles from "../styles/Home.module.css";
import Image from "next/image";

const inter = Inter({ subsets: ["latin"] });
const uniqueId = sha1("eu sou o mio");

interface FraseProps {
  autor: string;
  texto: string;
}

interface PhrasesProps {
  termoDePesquisa: string;
  total: number;
  frases: FraseProps[];
}

export default function Home({
  phrases = null,
}: {
  phrases: PhrasesProps | null;
}) {
  const [apresetation, setApresetation] = useState("...");
  const [isActive, setIsActive] = useState(false);
  const [searchValue, setSearchValue] = useState("");

  function handleSearch() {
    if (searchValue == "" || searchValue == null) return;

    window.open(
      `https://www.google.com/search?q=${searchValue}&oq=${searchValue}&ie=UTF-8`,
      "_blank"
    );

    setApresetation("");
  }

  useEffect(() => {
    let time = setInterval(() => {
      if (isActive) return () => clearInterval(time);
      const now = Number(new Date().getHours());
      console.log(now);

      if (now >= 0 && now <= 5) {
        // entre meia noite (0h) e 5 da madrugada
        setApresetation("Boa madrugada!");
      } else if (now >= 6 && now < 12) {
        // entre 6 e 11 da manhÃ£
        setApresetation("Bom dia!");
      } else if (now >= 12 && now < 18) {
        // entre meio dia (12h) e 17 (5h) da tarde
        setApresetation("Boa tarde!");
      } else if (now >= 18 && now <= 23) {
        // entre 18 (6h) e 23 (11h) da noite
        setApresetation("Boa noite!");
      }

      console.log(apresetation);

      setIsActive(true);
    }, 1000);
  }, [apresetation, isActive]);

  return (
    <>
      <Head>
        <title>{apresetation}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <h1>{apresetation}</h1>
          <div className={styles.thirteen}>
            <h1>{new Date().getFullYear() - 2000}</h1>
          </div>
        </div>

        <div className={styles.center}>
          <h1>
            {!!phrases?.frases && (
              <label htmlFor={uniqueId}>{phrases.frases[Math.floor(Math.random() * (phrases.frases.length - 0 + 1) + 0)].texto}</label>
            )}
          </h1>
          <form
            onSubmit={(e) => {
              e.preventDefault();

              handleSearch();
            }}
            action=""
            className={styles.from}
          >
            <input
              value={searchValue}
              onChange={(e) => setSearchValue(e.target.value)}
              placeholder="Como posso lhe ajudar hoje?"
              type="search"
              name="search"
              id={uniqueId}
            />
            <button onClick={handleSearch} title="Procurar" type="button">
              <SearchIcon height={40} width={40} />
            </button>
          </form>
        </div>

        <div className={styles.grid}>
          {data.map(({ name, description, link }, i) => (
            <Link
              href={link}
              className={styles.card}
              target="_blank"
              rel="noopener noreferrer"
              key={i}
            >
              <h2 className={inter.className}>
                <Image
                  alt={name}
                  loading="eager"
                  width={25}
                  height={25}
                  src={`/icons/${name.toLowerCase()}.png`}
                />
                {name}
                <ArrowRight />
              </h2>
            </Link>
          ))}
        </div>
      </main>
    </>
  );
}

// export async function getServerSideProps() {
//   const phrases = await fetch(
//     "https://pensador-api.vercel.app/?term=Collen+Hoover&max=1"
//   ).then((e) => e.json());

//   return {
//     props: {
//       phrases,
//     }, // will be passed to the page component as props
//   };
// }

export async function getStaticProps() {
  const phrases = await fetch(
    "https://pensador-api.vercel.app/?term=Collen+Hoover&max=29"
  ).then((e) => e.json());

  return {
    props: {
      phrases,
    }, // will be passed to the page component as props
    // Next.js will attempt to re-generate the page:
    // - When a request comes in
    // - At most once every 10 seconds
    revalidate: 10, // In seconds
  };
}
